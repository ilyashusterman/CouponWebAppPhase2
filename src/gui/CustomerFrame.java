package gui;

import java.util.List;
import javax.swing.JFrame;
import exceptions.FacadeException;
import facadedb.CustomerFacadeDB;
import servicebeans.Coupon;
import servicebeans.CouponType;

@SuppressWarnings({"rawtypes","unchecked"})
public class CustomerFrame extends JFrame {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private CustomerFacadeDB customer;
	String regex = "[0-9]+";
    private javax.swing.JTable TableQuery;
    private javax.swing.JList<String> couponTypes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton logout;
    private javax.swing.JTextField priceTxt;
    private javax.swing.JButton purchaseCoupon;
    private javax.swing.JButton showAllCoupons;
    private javax.swing.JButton showCouponsByPrice;
    private javax.swing.JButton showCouponsByType;
    private javax.swing.JButton showCustomerDetails;
    private javax.swing.JButton showPurchasedCoupons;
	public CustomerFrame(CustomerFacadeDB customer) {
		super("Customer Account");
		this.customer=customer;
		  try {
	            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
	                if ("Nimbus".equals(info.getName())) {
	                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
	                    break;
	                }
	            }
	        } catch (ClassNotFoundException ex) {
	            java.util.logging.Logger.getLogger(CustomerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (InstantiationException ex) {
	            java.util.logging.Logger.getLogger(CustomerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (IllegalAccessException ex) {
	            java.util.logging.Logger.getLogger(CustomerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
	            java.util.logging.Logger.getLogger(CustomerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        }
	    initComponents();
	    setVisible(true);
	    }

	    /**
	     * This method is called from within the constructor to initialize the form.
	     * WARNING: Do NOT modify this code. The content of this method is always
	     * regenerated by the Form Editor.
	     */
                        
	      
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TableQuery = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        showCustomerDetails = new javax.swing.JButton();
        showAllCoupons = new javax.swing.JButton();
        showCouponsByType = new javax.swing.JButton();
        showCouponsByPrice = new javax.swing.JButton();
        priceTxt = new javax.swing.JTextField();
        purchaseCoupon = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        couponTypes = new javax.swing.JList<>();
        showPurchasedCoupons = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TableQuery.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        TableQuery.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Title", "Start_date", "End_date", "Amount", "Coupon Type", "Massage", "Price", "Image"
            }
        ) {
            /**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableQuery.setUpdateSelectionOnSort(false);
        jScrollPane1.setViewportView(TableQuery);

        jLabel1.setText("***Customer Account***");

        showCustomerDetails.setText("Show profile details");
        showCustomerDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCustomerDetailsActionPerformed(evt);
            }
        });

        showAllCoupons.setText("Show all Coupons for Purchase ");
        showAllCoupons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllCouponsActionPerformed(evt);
            }
        });

        showCouponsByType.setText("Show purchased Coupons by type ");
        showCouponsByType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCouponsByTypeActionPerformed(evt);
            }
        });

        showCouponsByPrice.setText("Show purchased Coupons up to price :");
        showCouponsByPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCouponsByPriceActionPerformed(evt);
            }
        });

        priceTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceTxtActionPerformed(evt);
            }
        });

        purchaseCoupon.setText("Purchase Coupon");
        purchaseCoupon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseCouponActionPerformed(evt);
            }
        });

        logout.setText("Log out");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        couponTypes.setModel(new javax.swing.AbstractListModel<String>() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			String[] strings = { String.valueOf(CouponType.CAMPING),
					String.valueOf(CouponType.ELECTRICITY), String.valueOf(CouponType.FOOD),
					String.valueOf(CouponType.HEALTH), String.valueOf(CouponType.RESTURANTS),
					String.valueOf(CouponType.SPORTS), String.valueOf(CouponType.TRAVELING) };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(couponTypes);

        showPurchasedCoupons.setText("Show purchased coupons");
        showPurchasedCoupons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPurchasedCouponsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(306, 306, 306)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(logout))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(purchaseCoupon)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(showPurchasedCoupons, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(showCustomerDetails, javax.swing.GroupLayout.Alignment.LEADING)))
                                        .addGap(18, 18, 18)
                                        .addComponent(showAllCoupons, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(showCouponsByPrice)
                                                .addGap(28, 28, 28))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(showCouponsByType)
                                                .addGap(42, 42, 42)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(5, 5, 5))
                                            .addComponent(priceTxt))))
                                .addGap(19, 19, 19)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showCouponsByType)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(showCustomerDetails)
                                    .addComponent(showAllCoupons))
                                .addGap(18, 18, 18)
                                .addComponent(showPurchasedCoupons))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(purchaseCoupon)
                            .addComponent(showCouponsByPrice)
                            .addComponent(priceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addComponent(logout)
                .addGap(82, 82, 82))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                                               

	    private void showCustomerDetailsActionPerformed(java.awt.event.ActionEvent evt) {                                                    
	       CustomerDetails.getCompanyDetails(customer);
	    }                                                   

	    private void showAllCouponsActionPerformed(java.awt.event.ActionEvent evt) {                                               
	    	try {
				List<Coupon> couponsQuery = (List<Coupon>) customer.showAllCoupons();
				int i = 0;
				if (couponsQuery != null && couponsQuery.get(0)!=null) {

					Object service[][] = new Object[couponsQuery.size()][9];
					for (Coupon coupon : couponsQuery) {
						service[i][0] = coupon.getId();
						service[i][1] = coupon.getTitle();
						service[i][2] = coupon.getStartDate();
						service[i][3] = coupon.getEndDate();
						service[i][4] = coupon.getAmount();
						service[i][5] = String.valueOf(coupon.getType());
						service[i][6] = coupon.getMassage();
						service[i][7] = coupon.getPrice();
						service[i][8] = coupon.getImgPath();
						i++;
					}
					TableQuery.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
					TableQuery.setModel(new javax.swing.table.DefaultTableModel(service, new String[] { "ID", "Title",
							"Start_date", "End_date", "Amount", "Coupon Type", "Massage", "Price", "Image" }) {
						/**
								 * 
								 */
								private static final long serialVersionUID = 1L;

						Class[] types = new Class[] { java.lang.Long.class, java.lang.String.class, java.sql.Date.class,
								java.lang.String.class, java.lang.Integer.class, java.lang.String.class,
								java.lang.String.class, java.lang.Double.class, java.lang.String.class };

						boolean[] canEdit = new boolean [] {
				                false, false, false, false, false, false, false, false, false
				            };

				
							public Class getColumnClass(int columnIndex) {
				                return types [columnIndex];
				            }

				            public boolean isCellEditable(int rowIndex, int columnIndex) {
				                return canEdit [columnIndex];
				            }
				        });
				        TableQuery.setUpdateSelectionOnSort(false);
				        jScrollPane1.setViewportView(TableQuery);
				}
			} catch (FacadeException e) {
				new ErrorHandle().showEventDemo(e.getMessage());  
			}
	    }                                              

	    private void showCouponsByTypeActionPerformed(java.awt.event.ActionEvent evt) {                                                  
	    	if (!couponTypes.isSelectionEmpty() && couponTypes.getSelectedValue() != null) {
				CouponType type = CouponType.valueOf(couponTypes.getSelectedValue());
				try {
					List<Coupon> couponsQuery = (List<Coupon>) customer.getAllPurchasedCouponsByType(type);
					int i = 0;
					if (couponsQuery.get(0)!=null) {

						Object service[][] = new Object[couponsQuery.size()][9];
						for (Coupon coupon : couponsQuery) {
							service[i][0] = coupon.getId();
							service[i][1] = coupon.getTitle();
							service[i][2] = coupon.getStartDate();
							service[i][3] = coupon.getEndDate();
							service[i][4] = coupon.getAmount();
							service[i][5] = String.valueOf(coupon.getType());
							service[i][6] = coupon.getMassage();
							service[i][7] = coupon.getPrice();
							service[i][8] = coupon.getImgPath();
							i++;
						}
						TableQuery.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
						TableQuery.setModel(new javax.swing.table.DefaultTableModel(service, new String[] { "ID", "Title",
								"Start_date", "End_date", "Amount", "Coupon Type", "Massage", "Price", "Image" }) {
							/**
									 * 
									 */
									private static final long serialVersionUID = 1L;
							Class[] types = new Class[] { java.lang.Long.class, java.lang.String.class, java.sql.Date.class,
									java.lang.String.class, java.lang.Integer.class, java.lang.String.class,
									java.lang.String.class, java.lang.Double.class, java.lang.String.class };
							boolean[] canEdit = new boolean [] {
					                false, false, false, false, false, false, false, false, false
					            };

					            public Class getColumnClass(int columnIndex) {
					                return types [columnIndex];
					            }

					            public boolean isCellEditable(int rowIndex, int columnIndex) {
					                return canEdit [columnIndex];
					            }
					        });
					        TableQuery.setUpdateSelectionOnSort(false);
					        jScrollPane1.setViewportView(TableQuery);
					}
				} catch (FacadeException e) {
					new ErrorHandle().showEventDemo(e.getMessage());  
				}
			}
	    }                                                 

	    private void showCouponsByPriceActionPerformed(java.awt.event.ActionEvent evt) {                                                   
	    	if (!priceTxt.getText().equals("")&&priceTxt.getText().matches(regex)) {
				double price = Double.valueOf(priceTxt.getText()).doubleValue();
				try {
					List<Coupon> couponsQuery = (List<Coupon>) customer.getAllPurchasedCouponsByPrice(price);
					int i = 0;
					if (couponsQuery.get(0)!=null) {

						Object service[][] = new Object[couponsQuery.size()][9];
						for (Coupon coupon : couponsQuery) {
							service[i][0] = coupon.getId();
							service[i][1] = coupon.getTitle();
							service[i][2] = coupon.getStartDate();
							service[i][3] = coupon.getEndDate();
							service[i][4] = coupon.getAmount();
							service[i][5] = String.valueOf(coupon.getType());
							service[i][6] = coupon.getMassage();
							service[i][7] = coupon.getPrice();
							service[i][8] = coupon.getImgPath();
							i++;
						}
						TableQuery.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
						TableQuery.setModel(new javax.swing.table.DefaultTableModel(service, new String[] { "ID", "Title",
								"Start_date", "End_date", "Amount", "Coupon Type", "Massage", "Price", "Image" }) {
							/**
									 * 
									 */
									private static final long serialVersionUID = 1L;
							Class[] types = new Class[] { java.lang.Long.class, java.lang.String.class, java.sql.Date.class,
									java.lang.String.class, java.lang.Integer.class, java.lang.String.class,
									java.lang.String.class, java.lang.Double.class, java.lang.String.class };
							boolean[] canEdit = new boolean [] {
					                false, false, false, false, false, false, false, false, false
					            };

					            public Class getColumnClass(int columnIndex) {
					                return types [columnIndex];
					            }

					            public boolean isCellEditable(int rowIndex, int columnIndex) {
					                return canEdit [columnIndex];
					            }
					        });
					        TableQuery.setUpdateSelectionOnSort(false);
					        jScrollPane1.setViewportView(TableQuery);
					}
				} catch (FacadeException e) {
					new ErrorHandle().showEventDemo(e.getMessage());  
				}
			}
	    }                                                  

	    private void priceTxtActionPerformed(java.awt.event.ActionEvent evt) {                                         
	        // TODO add your handling code here:
	    }                                        

	    private void purchaseCouponActionPerformed(java.awt.event.ActionEvent evt) {                                               
	    	try {
				int selectedRowIndex = TableQuery.getSelectedRow();
				if (selectedRowIndex >= 0) {
					Long id = (Long) TableQuery.getModel().getValueAt(selectedRowIndex, 0);
					try {
						customer.purchaseCoupon(id);
					} catch (FacadeException e) {
						new ErrorHandle().showEventDemo(e.getMessage());  
					}

				}
			} catch (NullPointerException e) {
				new ErrorHandle().showEventDemo(e.getMessage());  
			}
	    }                                              

	    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {                                       
	        new login();
			dispose();
	    }                                      

	    private void showPurchasedCouponsActionPerformed(java.awt.event.ActionEvent evt) {                                                     
	    	try {
				List<Coupon> couponsQuery = (List<Coupon>) customer.getAllPurchasedCoupons();
				int i = 0;
				if (couponsQuery.get(0) != null && !couponsQuery.isEmpty()) {

					Object service[][] = new Object[couponsQuery.size()][9];
					for (Coupon coupon : couponsQuery) {
						service[i][0] = coupon.getId();
						service[i][1] = coupon.getTitle();
						service[i][2] = coupon.getStartDate();
						service[i][3] = coupon.getEndDate();
						service[i][4] = coupon.getAmount();
						service[i][5] = String.valueOf(coupon.getType());
						service[i][6] = coupon.getMassage();
						service[i][7] = coupon.getPrice();
						service[i][8] = coupon.getImgPath();
						i++;
					}
					TableQuery.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
					TableQuery.setModel(new javax.swing.table.DefaultTableModel(service, new String[] { "ID", "Title",
							"Start_date", "End_date", "Amount", "Coupon Type", "Massage", "Price", "Image" }) {
						/**
								 * 
								 */
								private static final long serialVersionUID = 1L;

						Class[] types = new Class[] { java.lang.Long.class, java.lang.String.class, java.sql.Date.class,
								java.lang.String.class, java.lang.Integer.class, java.lang.String.class,
								java.lang.String.class, java.lang.Double.class, java.lang.String.class };

						boolean[] canEdit = new boolean [] {
				                false, false, false, false, false, false, false, false, false
				            };

				            public Class getColumnClass(int columnIndex) {
				                return types [columnIndex];
				            }

				            public boolean isCellEditable(int rowIndex, int columnIndex) {
				                return canEdit [columnIndex];
				            }
				        });
				        TableQuery.setUpdateSelectionOnSort(false);
				        jScrollPane1.setViewportView(TableQuery);
				}
			} catch (FacadeException e) {
				new ErrorHandle().showEventDemo(e.getMessage());  
			}
	    }                                                    

                 
	}
