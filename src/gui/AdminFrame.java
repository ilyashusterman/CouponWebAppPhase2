package gui;

import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;
import exceptions.FacadeException;
import facadedb.AdminFacadeDB;
import servicebeans.Company;
import servicebeans.Customer;


@SuppressWarnings({"serial", "unchecked", "rawtypes","deprecation" })
public class AdminFrame extends JFrame {
	String regex = "[0-9]+";
    private javax.swing.JTable TableQuery;
    private javax.swing.JRadioButton addComp;
    private javax.swing.JRadioButton addCust;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField compId;
    private javax.swing.JTextField custId;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton removeComp;
    private javax.swing.JRadioButton removeCust;
    private javax.swing.JButton showCompanies;
    private javax.swing.JButton showCompanyByID;
    private javax.swing.JButton showCustomerByID;
    private javax.swing.JButton showCustomers;
    private javax.swing.JRadioButton updateComp;
    private javax.swing.JRadioButton updateCust;
    private javax.swing.JButton logout;
    public AdminFacadeDB admin;
	public AdminFrame(AdminFacadeDB admin){
		super("Admin user Couponsystem");
		this.admin=admin;
		try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
		  initComponents();
		  setLocationRelativeTo(null);
		  setVisible(true);
	}
	    /**
	     * This method is called from within the constructor to initialize the form.
	     * WARNING: Do NOT modify this code. The content of this method is always
	     * regenerated by the Form Editor.
	     */

	    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	    private void initComponents() {

	        buttonGroup1 = new javax.swing.ButtonGroup();
	        jLabel1 = new javax.swing.JLabel();
	        showCompanies = new javax.swing.JButton();
	        showCustomers = new javax.swing.JButton();
	        showCompanyByID = new javax.swing.JButton();
	        compId = new javax.swing.JTextField();
	        custId = new javax.swing.JTextField();
	        showCustomerByID = new javax.swing.JButton();
	        updateComp = new javax.swing.JRadioButton();
	        removeCust = new javax.swing.JRadioButton();
	        addComp = new javax.swing.JRadioButton();
	        addCust = new javax.swing.JRadioButton();
	        updateCust = new javax.swing.JRadioButton();
	        jButton1 = new javax.swing.JButton();
	        jLabel2 = new javax.swing.JLabel();
	        removeComp = new javax.swing.JRadioButton();
	        jScrollPane1 = new javax.swing.JScrollPane();
	        TableQuery = new javax.swing.JTable();
	        logout = new javax.swing.JButton();

	        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

	        jLabel1.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
	        jLabel1.setText("***Admin Account***");

	        showCompanies.setLabel("Show companies");
	        showCompanies.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                showCompaniesActionPerformed(evt);
	            }
	        });

	        showCustomers.setLabel("Show customers");
	        showCustomers.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                showCustomersActionPerformed(evt);
	            }
	        });

	        showCompanyByID.setText("Show company by id:");
	        showCompanyByID.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                showCompanyByIDActionPerformed(evt);
	            }
	        });

	        custId.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                custIdActionPerformed(evt);
	            }
	        });

	        showCustomerByID.setText("Show customer by id:");
	        showCustomerByID.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                showCustomerByIDActionPerformed(evt);
	            }
	        });

	        buttonGroup1.add(updateComp);
	        updateComp.setLabel("Update Company");
	        updateComp.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                updateCompActionPerformed(evt);
	            }
	        });

	        buttonGroup1.add(removeCust);
	        removeCust.setLabel("Remove Customer");
	        removeCust.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                removeCustActionPerformed(evt);
	            }
	        });

	        buttonGroup1.add(addComp);
	        addComp.setLabel("Add Company");
	        addComp.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                addCompActionPerformed(evt);
	            }
	        });

	        buttonGroup1.add(addCust);
	        addCust.setLabel("Add Customer");
	        addCust.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                addCustActionPerformed(evt);
	            }
	        });

	        buttonGroup1.add(updateCust);
	        updateCust.setLabel("Update Customer");
	        updateCust.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                updateCustActionPerformed(evt);
	            }
	        });

	        jButton1.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
	        jButton1.setText("choose");
	        jButton1.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	            	buttonGroup1.getSelection().setArmed(true);;
	            }
	        });

	        jLabel2.setText("Actions in database");

	        buttonGroup1.add(removeComp);
	        removeComp.setLabel("Remove Company");
	        removeComp.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                removeCompActionPerformed(evt);
	            }
	        });

	        TableQuery.setModel(new javax.swing.table.DefaultTableModel(new Object [][] {
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null},
	        	{null, null, null, null}},
	            new String [] {
	                "ID", "Name", "Password", "Email"
	            }
	        ) {

				Class[] types = new Class [] {
	                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
	            };

				public Class getColumnClass(int columnIndex) {
	                return types [columnIndex];
	            }
	        });
	        TableQuery.getTableHeader().setReorderingAllowed(false);
	        jScrollPane1.setViewportView(TableQuery);

	        logout.setText("Logout");
	        logout.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                logoutActionPerformed(evt);
	            }
	        });
	        
	        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
	        getContentPane().setLayout(layout);
	        layout.setHorizontalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(layout.createSequentialGroup()
	                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                    .addGroup(layout.createSequentialGroup()
	                        .addGap(219, 219, 219)
	                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
	                    .addGroup(layout.createSequentialGroup()
	                        .addComponent(showCompanyByID)
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                        .addComponent(compId, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addGap(40, 40, 40)
	                        .addComponent(showCompanies)
	                        .addGap(18, 18, 18)
	                        .addComponent(showCustomers))
	                    .addGroup(layout.createSequentialGroup()
	                        .addComponent(showCustomerByID)
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                        .addComponent(custId, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
	                    .addGroup(layout.createSequentialGroup()
	                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                            .addComponent(updateCust)
	                            .addComponent(updateComp)
	                            .addComponent(jButton1)
	                            .addComponent(jLabel2)
	                            .addComponent(addCust)
	                            .addComponent(removeComp)
	                            .addComponent(removeCust)
	                            .addComponent(addComp))
	                        .addGroup(layout.createSequentialGroup()
	                                .addContainerGap()
	                                .addComponent(logout))
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	                        
	                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
	                .addContainerGap(63, Short.MAX_VALUE))
	        );
	        layout.setVerticalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(layout.createSequentialGroup()
	                .addGap(29, 29, 29)
	                .addComponent(jLabel1)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                    .addComponent(showCompanyByID)
	                    .addComponent(compId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	                    .addComponent(showCompanies)
	                    .addComponent(showCustomers))
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                    .addComponent(showCustomerByID)
	                    .addComponent(custId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
	                .addGap(29, 29, 29)
	                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                    .addGroup(layout.createSequentialGroup()
	                        .addComponent(jLabel2)
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	                        .addComponent(addComp)
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                        .addComponent(addCust)
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                        .addComponent(removeComp)
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                        .addComponent(removeCust)
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                        .addComponent(updateComp)
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                        .addComponent(updateCust)
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	                        .addComponent(jButton1))
	                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
	                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	            .addComponent(logout)
                .addGap(27, 27, 27)
	        );

	        compId.getAccessibleContext().setAccessibleParent(showCompanyByID);
	        showCustomerByID.getAccessibleContext().setAccessibleName("Show customer by id:");

	        pack();
	    }// </editor-fold>                        

	    private void showCompaniesActionPerformed(java.awt.event.ActionEvent evt) {                                              
	        try {
				List<Company> companiesQuery=(List<Company>) admin.getAllCompanies();
				int i=0;
				if (companiesQuery.get(0)!=null) {
				
				Object service[][]=new Object[companiesQuery.size()][4];
				for (Company company : companiesQuery) {
						service[i][0]=company.getId();
						service[i][1]=company.getCompName();
						service[i][2]=company.getPassword();
						service[i][3]=company.getEmail();
					i++;
				}
				 TableQuery.setModel(new javax.swing.table.DefaultTableModel(service,
				            new String [] {
					                "ID", "Name", "Password", "Email"
					            }
					        ) {

					Class[] types = new Class [] {
				                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
				            };
				            boolean[] canEdit = new boolean [] {
				                false, false, true, true
				            };

							public Class getColumnClass(int columnIndex) {
				                return types [columnIndex];
				            }

				            public boolean isCellEditable(int rowIndex, int columnIndex) {
				                return canEdit [columnIndex];
				            }
				        });
				        TableQuery.getTableHeader().setReorderingAllowed(false);
				        jScrollPane1.setViewportView(TableQuery);
				}
			} catch (FacadeException e) {
				
				new ErrorHandle().showEventDemo(e.getMessage());  
			}
	    }                                             

	    private void showCustomersActionPerformed(java.awt.event.ActionEvent evt) {                                              
	    	try {
				List<Customer> customersQuery=(List<Customer>) admin.getAllCustomer();
				int i=0;
				if (customersQuery.get(0)!=null) {
				
				Object service[][]=new Object[customersQuery.size()][4];
				for (Customer customer : customersQuery) {
						service[i][0]=customer.getId();
						service[i][1]=customer.getCustName();
						service[i][2]=customer.getPassword();
						service[i][3]="";
					i++;
				}
				 TableQuery.setModel(new javax.swing.table.DefaultTableModel(service,
				            new String [] {
					                "ID", "Name", "Password", "Email"
					            }
					        ) {
					 Class[] types = new Class [] {
				                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
				            };
				            boolean[] canEdit = new boolean [] {
				                false, false, true, false
				            };

				            public Class getColumnClass(int columnIndex) {
				                return types [columnIndex];
				            }

				            public boolean isCellEditable(int rowIndex, int columnIndex) {
				                return canEdit [columnIndex];
				            }
				        });
				        TableQuery.getTableHeader().setReorderingAllowed(false);
				        jScrollPane1.setViewportView(TableQuery);
				}
			} catch (FacadeException e) {
				new ErrorHandle().showEventDemo(e.getMessage());  
			}
	    }                                             

	    private void showCompanyByIDActionPerformed(java.awt.event.ActionEvent evt) {    
	    	if(!compId.getText().equals("")&&compId.getText().matches(regex)){
	    		long id=Long.valueOf(compId.getText()).longValue();
	    		try {
	    			Company comp=admin.getCompany(id);
					List<Company> companiesQuery=new ArrayList<>();
					companiesQuery.add(comp);
					int i=0;
					if (companiesQuery.get(0)!=null&&comp!=null) {
					
					Object service[][]=new Object[companiesQuery.size()][4];
					for (Company company : companiesQuery) {
							service[i][0]=company.getId();
							service[i][1]=company.getCompName();
							service[i][2]=company.getPassword();
							service[i][3]=company.getEmail();
						i++;
					}
					 TableQuery.setModel(new javax.swing.table.DefaultTableModel(service,
					            new String [] {
						                "ID", "Name", "Password", "Email"
						            }
						        ) {
						 Class[] types = new Class [] {
					                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
					            };
					            boolean[] canEdit = new boolean [] {
					                false, false, true, true
					            };

					            public Class getColumnClass(int columnIndex) {
					                return types [columnIndex];
					            }

					            public boolean isCellEditable(int rowIndex, int columnIndex) {
					                return canEdit [columnIndex];
					            }
					        });
					        TableQuery.getTableHeader().setReorderingAllowed(false);
					        jScrollPane1.setViewportView(TableQuery);
					}
				} catch (FacadeException e) {
					new ErrorHandle().showEventDemo(e.getMessage());  
				}
	    	
	    	}
			 
	    }
	    	
	                                                  

	    private void showCustomerByIDActionPerformed(java.awt.event.ActionEvent evt) {                                                 
	    	if(!custId.getText().equals("")&&custId.getText().matches(regex)){
	    	try {
	    		long id=Long.valueOf(custId.getText()).longValue();
				List<Customer> customersQuery=new ArrayList<>();
				Customer cust=admin.getCustomer(id);
				customersQuery.add(cust);
				int i=0;
				if (customersQuery.get(0)!=null&&cust!=null) {
				
				Object service[][]=new Object[customersQuery.size()][4];
				for (Customer customer : customersQuery) {
						service[i][0]=customer.getId();
						service[i][1]=customer.getCustName();
						service[i][2]=customer.getPassword();
						service[i][3]="";
					i++;
				}
				 TableQuery.setModel(new javax.swing.table.DefaultTableModel(service,
				            new String [] {
					                "ID", "Name", "Password", "Email"
					            }
					        ) {
					 Class[] types = new Class [] {
				                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
				            };
				            boolean[] canEdit = new boolean [] {
				                false, false, true, false
				            };

				            public Class getColumnClass(int columnIndex) {
				                return types [columnIndex];
				            }

				            public boolean isCellEditable(int rowIndex, int columnIndex) {
				                return canEdit [columnIndex];
				            }
				        });
				        TableQuery.getTableHeader().setReorderingAllowed(false);
				        jScrollPane1.setViewportView(TableQuery);
				}
			} catch (FacadeException e) {
				new ErrorHandle().showEventDemo(e.getMessage());  
			}
	    	}
	    } 
	    

	    private void custIdActionPerformed(java.awt.event.ActionEvent evt) {                                       
	        // TODO add your handling code here:
	    }                                      

	    private void updateCompActionPerformed(java.awt.event.ActionEvent evt) {                                           
	    	try{
		    	int selectedRowIndex = TableQuery.getSelectedRow();
		    	if (selectedRowIndex>=0) {
		    		Object id = (Object) TableQuery.getModel().getValueAt(selectedRowIndex, 0);
		    		Long theid=(Long)id;
		    		String email= (String) TableQuery.getModel().getValueAt(selectedRowIndex, 3);
		    		String password= (String) TableQuery.getModel().getValueAt(selectedRowIndex, 2);
					if(isCompanies(email)){
				
		    	try {
					admin.updateCompany(theid, password, email);
				} catch (FacadeException e) {
					new ErrorHandle().showEventDemo(e.getMessage());  
				}
		    	}
		    	}
		    	}catch(NullPointerException e){
		    		new ErrorHandle().showEventDemo(e.getMessage());  
		    	}
	    }                                          

	    private void removeCustActionPerformed(java.awt.event.ActionEvent evt) {  
	    	try{
	    	int selectedRowIndex = TableQuery.getSelectedRow();
	    	if (selectedRowIndex>=0) {
	    		Object id = (Object) TableQuery.getModel().getValueAt(selectedRowIndex, 0);
	    		Long theid=(Long)id;
	    		String email= (String) TableQuery.getModel().getValueAt(selectedRowIndex, 3);
			if(!isCompanies(email)){
	    	try {
				admin.removeCustomer(theid);
			} catch (FacadeException e) {
				new ErrorHandle().showEventDemo(e.getMessage());  
			}
	    	}
	    	}
	    }catch(NullPointerException e){
	    	new ErrorHandle().showEventDemo(e.getMessage());  
    	}
	    }                                          

	    private void addCompActionPerformed(java.awt.event.ActionEvent evt) {                                        
	        AddCompany.getAddCompany(admin);
	    }                                       

	    private void addCustActionPerformed(java.awt.event.ActionEvent evt) {                                        
	        AddCustomer.getAddCustomer(admin);
	    }                                       

	    private void updateCustActionPerformed(java.awt.event.ActionEvent evt) {                                           
	    	try{
		    	int selectedRowIndex = TableQuery.getSelectedRow();
		    	if (selectedRowIndex>=0) {
		    		Object id = (Object) TableQuery.getModel().getValueAt(selectedRowIndex, 0);
		    		Long theid=(Long)id;
		    		String email= (String) TableQuery.getModel().getValueAt(selectedRowIndex, 3);
		    		String password= (String) TableQuery.getModel().getValueAt(selectedRowIndex, 2);
		    		
				if(!isCompanies(email)){
		    	try {
					admin.updateCustomer(theid, password);
				} catch (FacadeException e) {
					new ErrorHandle().showEventDemo(e.getMessage());  
				}
		    	}
		    	}
		    }catch(NullPointerException e){
	    		System.out.println("did not choose on table");
	    	}
	    }                                          

	    private void removeCompActionPerformed(java.awt.event.ActionEvent evt) { 
	    	try{
	    	int selectedRowIndex = TableQuery.getSelectedRow();
	    	if (selectedRowIndex>=0) {
	    		Object id = (Object) TableQuery.getModel().getValueAt(selectedRowIndex, 0);
	    		Long theid=(Long)id;
	    		String email= (String) TableQuery.getModel().getValueAt(selectedRowIndex, 3);
				if(isCompanies(email)){
			
	    	try {
				admin.removeCompany(theid);
			} catch (FacadeException e) {
				new ErrorHandle().showEventDemo(e.getMessage());  
			}
	    	}
	    	}
	    	}catch(NullPointerException e){
	    		new ErrorHandle().showEventDemo(e.getMessage());  
	    	}
	    	
	    }    
	    private boolean isCompanies(String email){
	    	if(email.equals("")||email==null||email.equals(null)){
	    		return false;
	    	}
	    	return true;
	    }
	    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {                                       
	       new login();
		dispose();
	    }    

	    // Variables declaration - do not modify                     

	    // End of variables declaration                   
	}
             
		    
	

		    

